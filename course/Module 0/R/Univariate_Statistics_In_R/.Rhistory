My_Second_Vector = seq(from = 2.5, to = 5.0, by = 0.5)
# linear operation on two vectors
My_Third_Vec  = 10* My_First_Vector + 20*My_Second_Vector
# combining two vectors
First_and_Second <- c(My_First_Vector,My_Second_Vector)
# repeat a vector 3 times
vec3 <- c(0,0,7)
# combining two vectors
First_and_Second <- c(My_First_Vector,My_Second_Vector)
First_and_Second
# repeat a vector 3 times
vec3 <- c(0,0,7)
# repeat a vector 3 times
vec3 <- c(0,0,7)
Rvec3 <-rep(vec3,times=3)
# Generating a vector using 'n' numbers equally spaced
vec2 = seq(from = 2.5, to = 7, length.out = 10)
vec2
# Repeat individual occurences of a vector specified number of times
Rvec321 <- rep(c(1,2,3),times = c(3,2,1))
Rvec321
# repeat each occurence in a vector 'n' times
Rvecn <- rep(c(1,2,3),each=3)
Rvecn
#########################################################
#  Logical Vectors
#########################################################
#  for 5 Games played by 2 Players
Player_1 <- c(10,34,54,78,99)
Player_2 <- c(4,24,67,49,100)
# Find out How Player 1 performed  vs Player 2
Player_1.success <- Player_1 > Player_2
# Which matches did Player 1 win ?
Player_1_win  <- which(Player_1.success)
# What did Player 1 score in the matches player 1 won ?
P1_win_scores <- Player_1[Player_1_win]
# How many matches did Player 1 win ?
sum(Player_1.success)
# Did Player 1 win any match ?
any(Player_1.success)
# Did Player 1 win all the matches ?
all(Player_1.success)
########################################################
# ***********   Text and Strings    *********** #
#######################################################
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
##################################
# Simple string operations
##################################
# Define  a  string
x <- "Hello World"
# Get its length
lenx = length(x)
# How many characters in x ?
ncharx = nchar(x)
ncharx
# Define a vector of 2 strings
y  <- c("Hello","World")
# get its length
leny = length(y)
lenyy
# How many characters ?
nchary = nchar(y)
nchary
##################################
# Naming strings
##################################
# create a vector month.days
month.days <- c(31,28,31,30,31,30,31,31,30,31,30,31)
# Assign Month short names
mon.shortname <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(month.days) <- mon.shortname
# print name of the 5th month
names(month.days[5])
# print month names having days = 31
names(month.days[month.days==31])
# print names in descending order of month lengths consider the largest 5 months only
names(sort(month.days,decreasing=TRUE)[1:5])
# Define  a 2 by 3 matrix
A <- matrix(c(2, 4, 3, 1, 5, 7), nrow=2,ncol=3,byrow=TRUE)
# Print the  matrix
A
# Extract 2nd row 3rd column
A23 <- A[2, 3]
# Extracting a Vector from the Matrix
ARow2Vec <-  A[2, ]       # the 2nd row
# Extracting a Sub Matrix from the given Matrix
A2by2 <- A[1:2,1:2]
# Adding Row and Column Names
dimnames(A) = list(c("row1", "row2"),c("col1", "col2", "col3"))
# Adding Row and Column Names
dimnames(A) = list(c("row1", "row2"),c("col1", "col2", "col3"))
A
# ----------------------------------------------------------------------------------------
# Data Frames
# ----------------------------------------------------------------------------------------
# Define individual vectors
n<- c(2,3,5)
s<- c("aa","bb","cc")
b<- c(TRUE,FALSE,TRUE)
# Define dataframe
df<- data.frame(n,s,b)
df
# Get the first 6 rows of a built in data frame 'mtcars'
head(mtcars)
# extract a particular element   with row and col names
mtcars["Mazda RX4", "cyl"]
# Get number of Rows information
nrow(mtcars)
# Get number of Columns information
ncol(mtcars)
# ---------------------------------------------------------------------------------------
#    LISTS
# ---------------------------------------------------------------------------------------
n=c(2,3,5)
s=c("aa","bb","cc","dd","ee")
b=c(TRUE,FALSE,TRUE,FALSE,FALSE)
# x contains copies of n,s,b
x=list(n,s,b,3)
# Get number of Columns information
ncol(mtcars)
# ---------------------------------------------------------------------------------------
#    LISTS
# ---------------------------------------------------------------------------------------
n=c(2,3,5)
s=c("aa","bb","cc","dd","ee")
b=c(TRUE,FALSE,TRUE,FALSE,FALSE)
# x contains copies of n,s,b
x=list(n,s,b,3)
x
# Extracting a child list
child_list <- x[c(2, 4)]
child_list
# Slicing the list to extract a member
Second_Elem_Slice <- x[2]
Second_Elem_Slice
# Directly referencing a member of a list
Sec_Member <- x[[2]]
Sec_Member
#  -  List initialization concepts
# ------------------------------------
# Create empty list
mylist <- vector("list", length(mylist.names))
#  -  List initialization concepts
# ------------------------------------
# Create empty list
mylist <- vector("list", length(mylist.names))
#  -  List initialization concepts
# ------------------------------------
# Create list column names
mylist.names <- c("COL_1", "COL_2", "COL_3")
# Create empty list
mylist <- vector("list", length(mylist.names))
# Initialize list with three vectors of different lengths
mylist  <- list(a=1, b=1:2, c=1:3)
# Display list
mylist
# Name list  columns
names(mylist) <- mylist.names
# check list again
mylist
# ***********   Module 2    *********** #
#----------------------------------------------
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
# Read the Car Sales Csv file
Car_Data<-read.csv(file="CarSales.csv")
# Display  car sales data
Car_Data
# Subset- Choose car Make and Model, Sales  for sales > 300
TopSales <- subset(Car_Data,Sales>300)
# and list in Descending Order
Sorted_TopSales <- TopSales[order(-TopSales$Sales),]
# Display Sorted Data
Sorted_TopSales
# Write output file
write.table(Sorted_TopSales,file="Sorted_Top_Sales.csv", sep=",",row.names=FALSE)
#------------------------------------------------------------------
#  Misc. Control Functions
#-----------------------------------------------------------------
#-----------------------
# Conditional functions
#-----------------------
# Create a vector of 5 numbers
Vec1<-c(15,2,32,45,50)
# Return 1 if value is 2 return 0 otherwise
ifelse(Vec1==2,1,0)
TestVec = c(5,9,2,3)
ResultVec <- ifelse(TestVec %% 2 == 0,"even","odd")
# Dispay Result Vector
ResultVec
paste("a","b")
paste("Hello","World",sep="_")
String1<-c("hello","world")
paste(String1)
paste(String1,collapse=" ")
paste(String1,collapse="")
#---------------------------
# Checking for null
#--------------------------
# Create a vector with NULL
Vec1 <-c(1,2,3,NA,4,5,NA,NA)
# Check for  NULL
is.na(Vec1)
# Copy non Null values to another vector
No_Null_Vec <- Vec1[!is.na(Vec1)]
# Display No Null Vec
No_Null_Vec
# Replace Null with zeros in the original Vector
Vec1[is.na(Vec1)] <-0
#Display after replace
Vec1
# Create Database With same col name for the Key Column
Cust_Data   <- data.frame(Cust_ID= c(1,2,3,4,5), Name = c("Vinod","Ramesh","Ashish","Venkat","Raj"))
setwd("~/Pro_Bono_Work/Amity/Amity_Final_Decks/R_Codes/Univariate_Stat_In_R")
# ***********   Univariate Stats in R    *********** #
#--------------------------------------------------------------
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
# import the data set into the current workspace
data <- read.csv("bank-data.csv", header = T)
setwd("~/Pro_Bono_Work/Amity/Amity_Final_Decks/R_Codes/Univariate_Stat_In_R")
# import the data set into the current workspace
data <- read.csv("bank_data.csv", header = T)
View(data)  # allows us to view the data set
names(data)  # names of the variable
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
###########  GET DATA ###########################
# import the data set into the current workspace
data <- read.csv("bank_data.csv", header = T)
######## Explore Your Data  ###################
View(data)  # allows us to view the data set
names(data)  # names of the variable
dim(data)  # dimension (number of rows and columns)
str(data)  # structure of the data set
class(data)  # type of data
head(data, n = 5)  # displays the first 5 rows
tail(data, n = 5)  # displays the last 5 rows
#--------------------------------------------------------------
install.packages(“Hmisc”)
#--------------------------------------------------------------
install.packages("Hmisc")
install.packages("pastecs”)
install.packages("pastecs")
install.packages("psych")
#----------------------------------------------------------------
# Univariate Stats
#----------------------------------------------------------------
# Load packages
library(Hmisc)
library(pastecs)
library(psych)
# Summary
summary(data)
#-------------------------------------------------------
# Choose subset of data for EDA
#-------------------------------------------------------
var <- c("age", "marital", "education", "housing")
eda_data <- data[var]
#-------------------------------------------------------
# Choose subset of data for EDA
#-------------------------------------------------------
var <- c("age", "marital", "education", "housing")
eda_data <- data[,var]
#-------------------------------------------------------
# Choose subset of data for EDA
#-------------------------------------------------------
var <- c("age", "marital", "education", "housing")
eda_data <- data[var,]
names(eda_data)
#-------------------------------------------------------
# Choose subset of data for EDA
#-------------------------------------------------------
var <- c("age", "marital", "education", "housing")
eda_data <- select(data, var)
library(psych)
library(dplyr)
#-------------------------------------------------------
# Choose subset of data for EDA
#-------------------------------------------------------
var <- c("age", "marital", "education", "housing")
eda_data <- select(data, var)
######## Explore Your Data  ###################
View(data)  # allows us to view the data set
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
###########  GET DATA ###########################
# import the data set into the current workspace
data <- read.csv("bank_data.csv", header = T)
######## Explore Your Data  ###################
View(data)  # allows us to view the data set
######## Explore Your Data  ###################
View(data)  # allows us to view the data set
names(data)  # names of the variable
######## Explore Your Data  ###################
View(data)  # allows us to view the data set
names(data)  # names of the variable
# rename first col
colnames(data)[1] <- "age"
# rename first col
colnames(data)[1] <- "age"
names(data)
#-------------------------------------------------------
# Choose subset of data for EDA
#-------------------------------------------------------
var <- c("age", "marital", "education", "housing")
eda_data <- select(data, var)
names(eda_data)
# Stats on age
summary(eda_data$age)
stat.desc(eda_data$age)
describe(eda_data$age)
stat.desc(eda_data$age)
#--------------------------------------------------------------
#  Graphical views
#--------------------------------------------------------------
hist(eda_data$age,
main = "Histogram of Age",
xlab = "Age in Years")
#-------------------------------------------------------------
# Graphical views:  2 Box plots
#-------------------------------------------------------------
boxplot(eda_data$age,
main = toupper("Boxplot of Age"),
ylab = "Age in years",
col = "blue")
#------------------------------------------------------------
#   Kernel Density Plot
#------------------------------------------------------------
d <- density(eda_data$age)
plot(d, main = "Kernel density of Age")
polygon(d, col = "red", border = "blue")
setwd("~/Pro_Bono_Work/Amity/Amity_Final_Decks/R_Codes/Univariate_Stat_In_R")
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
###########  GET DATA ###########################
# import the data set into the current workspace
data <- read.csv("bank_data.csv", header = T)
######## Explore Your Data  ###################
View(data)  # allows us to view the data set
names(data)  # names of the variable
# rename first col
colnames(data)[1] <- "age"
names(data)
dim(data)  # dimension (number of rows and columns)
str(data)  # structure of the data set
class(data)  # type of data
head(data, n = 5)  # displays the first 5 rows
tail(data, n = 5)  # displays the last 5 rows
#----------------------------------------------------------------
# Univariate Stats
#----------------------------------------------------------------
# Load packages
library(Hmisc)
library(pastecs)
library(psych)
library(dplyr)
# Summary
summary(data)
#-------------------------------------------------------
# Choose subset of data for EDA
#-------------------------------------------------------
var <- c("age", "marital", "education", "housing")
eda_data <- select(data, var)
names(eda_data)
# Stats on age
summary(eda_data$age)
# Let us use the describe function now from  'Hmisc' package
#--------------------------------------------------------------
# Number of rows
# Standard deviation
# Trimmed mean
# Mean absolute deviation
# Skewness
# Kurtosis
# Standard error
#---------------------------------------------------------------
describe(eda_data$age)
stat.desc(eda_data$age)
#--------------------------------------------------------------
#  Graphical views:  1   Histogram
#--------------------------------------------------------------
hist(eda_data$age,
main = "Histogram of Age",
xlab = "Age in Years")
#-------------------------------------------------------------
# Graphical views:  2 Box plots
#-------------------------------------------------------------
boxplot(eda_data$age,
main = toupper("Boxplot of Age"),
ylab = "Age in years",
col = "blue")
#------------------------------------------------------------
#   Kernel Density Plot
#------------------------------------------------------------
d <- density(eda_data$age)
plot(d, main = "Kernel density of Age")
polygon(d, col = "red", border = "blue")
#---------------------  END of MODULE -------------------------------------
# Read the data file
PCData<- read.csv(file='PC_Sales.csv', header=T, sep=',')
# Provides basic descriptive statistics and frequencies.
summary(PCData)
# Open data editor
edit(PCData)
# Provides the structure of the dataset
str(PCData)
# Lists variables in the dataset
names(PCData)
# First few rows of the dataset
head(PCData)
# First 2 rows of dataset
head(PCData, n=2)
# Last few rows
tail(PCData)
# Last 2 rows
tail(PCData, n=2)
# Rows 2 to 4
PCData[2:4, ]
# Rows 2 to 4 with Columns 1 to 3
PCData[2:4,1:3]
# Rows 2 to 4 with Columns 1  and 3
PCData[2:4,c(1,3)]
# Mean of a particular column
mean(PCData$Units_Shipped_Q1_2016)
# Another Way fo getting the mean
with(PCData, mean(PCData$Units_Shipped_Q1_2016))
# Median
median(PCData$Units_Shipped_Q1_2016)
# Variance
var(PCData$Units_Shipped_Q1_2016)
# Standard Deviation
sd(PCData$Units_Shipped_Q1_2016)
# Maximum
max(PCData$Units_Shipped_Q1_2016)
# Minimum
min(PCData$Units_Shipped_Q1_2016) # Min value
# Range
range(PCData$Units_Shipped_Q1_2016) # Range
#Quantile 25%
quantile(PCData$Units_Shipped_Q1_2016)
# Number of Observations
length(PCData$Units_Shipped_Q1_2016)
# Length
length(PCData$Units_Shipped_Q1_2016)
# Which is the Maximum
PCData$Company[[which.max(PCData$Units_Shipped_Q1_2016)]]
#------------------------------------------------
#  apply()
#-----------------------------------------------
# clear all existing variables from console
cat("\014")
# clear all data variables
rm(list=ls())
# Create a Matrix
mat1 <- matrix(rep(seq(4), 4), ncol = 4)
#row sums of mat1
apply(mat1, 1, sum)
# Create a Matrix
mat1 <- matrix(rep(seq(4), 4), ncol = 4)
mat1
#row sums of mat1
apply(mat1, 1, sum)
#column sums of mat1
apply(mat1, 2, sum)
#  Applying a user defined function across Rows
#  Row Sum + 2
apply(mat1, 1, function(x) sum(x) + 2)
#creating a data frame using mat1
mat1.df <- data.frame(mat1)
mat1.df
#obtaining the sum of each variable in mat1.df
lapply(mat1.df, sum)  # Note a List is Returned
#storing the results of the lapply function in the list y
y <- lapply(mat1.df, sum)
#verifying that y is a list
is.list(y)
# user defined function with multiple arguments
# function defined inside the lapply function
y1 <- lapply(mat1.df, function(x, y) sum(x) + y, y = 5)
#displaying the first two results in the list
y1[1:2]
y2 <- sapply(mat1.df, function(x, y) sum(x) + y, y = 5)
# Display y2
y2
# Test If Vector
is.vector(y2)
# Consider the inbuilt data set iris
# a sneak peek into iris
head(iris)
# How many Species is Data available for ?
UniqueSpeciesCnt <- length(unique(iris$Species))
UniqueSpeciesCnt
# What are the different species listed ?
UniqueSpecies <- unique(iris$Species)
UniqueSpecies
# Find Mean Sepal Length in Dataset iris, Split the Result by Species
tapply(iris$Sepal.Length, iris$Species, mean)
